---
// src/pages/blog/index.astro
import Layout from "../../layouts/MainLayout.astro";
import { getCollection } from "astro:content";

// Récupération de tous les articles de blog
const blogEntries = await getCollection("blog");

// Tri des articles par date (du plus récent au plus ancien)
const sortedEntries = blogEntries.sort((a: any, b: any) => {
  return new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf();
});

// Paramètres de pagination
const postsPerPage = 6;
const currentPage = +Astro.url.searchParams.get("page") || 1;
const totalPages = Math.ceil(sortedEntries.length / postsPerPage);

// Articles de la page courante
const currentPageEntries = sortedEntries.slice(
  (currentPage - 1) * postsPerPage,
  currentPage * postsPerPage
);

// Extraction de tous les tags uniques
const allTags = [...new Set(sortedEntries.flatMap((entry) => entry.data.tags || []))];
---

<Layout title="Blog" theme="dark">
  <div class="blog-container">
    <header class="blog-header">
      <h1 class="gradient-text test-light">Le Blog</h1>
      <p class="blog-subtitle">Découvrez nos derniers articles et actualités</p>
    </header>

    <div class="blog-filters">
      <div class="search-box">
        <input type="text" id="searchInput" placeholder="Rechercher un article..." />
        <button class="search-button" id="searchButton">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round">
            <circle cx="11" cy="11" r="8"></circle>
            <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
          </svg>
        </button>
      </div>

      <div class="filter-tags">
        <button class="filter-tag active" data-tag="all">Tous</button>
        {
          allTags.map((tag) => (
            <button class="filter-tag" data-tag={tag}>
              {tag}
            </button>
          ))
        }
      </div>
    </div>

    <div class="posts-grid" id="postsGrid">
      {
        currentPageEntries.map((entry: any) => (
          <article class="post-card" data-tags={JSON.stringify(entry.data.tags || [])}>
            <a href={`/blog/${entry.slug}`} class="card-link">
              <div class="card-image-wrapper">
                {entry.data.image ? (
                  <img src={entry.data.image} alt={entry.data.title} class="card-image" />
                ) : (
                  <div class="card-image-placeholder">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="48"
                      height="48"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="1"
                      stroke-linecap="round"
                      stroke-linejoin="round">
                      <rect x="3" y="3" width="18" height="18" rx="2" ry="2" />
                      <circle cx="8.5" cy="8.5" r="1.5" />
                      <polyline points="21 15 16 10 5 21" />
                    </svg>
                  </div>
                )}
                {entry.data.tags && entry.data.tags.length > 0 && (
                  <div class="card-tag-highlight">
                    <span>{entry.data.tags[0]}</span>
                  </div>
                )}
              </div>

              <div class="card-content">
                <div class="card-meta">
                  <span class="post-date">
                    {new Date(entry.data.date).toLocaleDateString("fr-FR", {
                      year: "numeric",
                      month: "long",
                      day: "numeric",
                    })}
                  </span>
                  <span class="read-time">5 min de lecture</span>
                </div>

                <h2 class="post-title">{entry.data.title}</h2>

                {entry.data.excerpt && <p class="post-excerpt">{entry.data.excerpt}</p>}

                <div class="card-footer">
                  {entry.data.tags && entry.data.tags.length > 0 && (
                    <div class="post-tags">
                      {entry.data.tags.slice(0, 3).map((tag: string) => (
                        <span class="tag">{tag}</span>
                      ))}
                    </div>
                  )}
                  <span class="read-more">Lire l'article</span>
                </div>
              </div>
            </a>
          </article>
        ))
      }
    </div>

    <div
      id="noResults"
      class="no-results"
      style="display: none; text-align: center; padding: 30px;">
      <p>Aucun article ne correspond à votre recherche.</p>
    </div>

    <div class="pagination">
      <button class="pagination-button" id="prevPage" disabled={currentPage === 1}>Précédent</button
      >
      <div class="pagination-numbers" id="paginationNumbers">
        {
          Array.from({ length: Math.min(totalPages, 5) }).map((_, i) => {
            const pageNum = i + 1;
            return (
              <a
                href={`?page=${pageNum}`}
                class={`pagination-number ${pageNum === currentPage ? "active" : ""}`}>
                {pageNum}
              </a>
            );
          })
        }
      </div>
      <button class="pagination-button" id="nextPage" disabled={currentPage === totalPages}
        >Suivant</button
      >
    </div>
  </div>
</Layout>

<style>
  /* Variables spécifiques à cette page */
  :root {
    --card-radius: 12px;
    --transition-speed: 0.3s;
    --hover-lift: translateY(-6px);
  }

  /* Conteneur principal */
  .blog-container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 40px 20px 80px;
  }

  /* En-tête de la page */
  .blog-header {
    text-align: center;
    margin-bottom: 50px;
  }

  .blog-header h1 {
    background: linear-gradient(90deg, #02f791, #00ffff);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    color: transparent;
    font-size: 3.5rem;
    font-weight: 800;
    margin-bottom: 15px;
  }

  .blog-subtitle {
    font-size: 1.2rem;
    color: var(--text-secondary);
    max-width: 600px;
    margin: 0 auto;
    line-height: 1.5;
  }

  /* Filtres et recherche */
  .blog-filters {
    margin-bottom: 40px;
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .search-box {
    display: flex;
    max-width: 600px;
    margin: 0 auto;
    width: 100%;
    border-radius: 30px;
    overflow: hidden;
    background-color: var(--card-bg);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    transition: box-shadow var(--transition-speed) ease;
  }

  .search-box:focus-within {
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
  }

  .search-box input {
    flex-grow: 1;
    padding: 15px 20px;
    border: none;
    outline: none;
    font-size: 1rem;
    background-color: transparent;
    color: var(--text);
  }

  .search-button {
    background-color: var(--primary);
    border: none;
    padding: 0 20px;
    color: rgb(0, 0, 0);
    cursor: pointer;
    transition: background-color var(--transition-speed) ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .search-button:hover {
    background-color: var(--primary-dark);
  }

  .filter-tags {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 10px;
    padding: 10px 0;
  }

  .filter-tag {
    background-color: var(--card-bg);
    border: none;
    border-radius: 20px;
    padding: 8px 16px;
    font-size: 0.9rem;
    color: var(--text);
    cursor: pointer;
    transition:
      background-color var(--transition-speed),
      color var(--transition-speed);
  }

  .filter-tag:hover {
    background-color: var(--background-secondary);
  }

  .filter-tag.active {
    background-color: var(--primary);
    color: rgb(0, 0, 0);
  }

  /* Grille d'articles */
  .posts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: 30px;
    margin-bottom: 60px;
  }

  /* Carte d'article */
  .post-card {
    background-color: var(--card-bg);
    border-radius: var(--card-radius);
    overflow: hidden;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.08);
    transition:
      transform var(--transition-speed),
      box-shadow var(--transition-speed);
    height: 100%;
    display: flex;
  }

  .post-card:hover {
    transform: var(--hover-lift);
    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.12);
  }

  .card-link {
    text-decoration: none;
    color: var(--text);
    display: flex;
    flex-direction: column;
    height: 100%;
    width: 100%;
  }

  /* Image de la carte */
  .card-image-wrapper {
    height: 200px;
    position: relative;
    overflow: hidden;
  }

  .card-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.8s ease;
  }

  .post-card:hover .card-image {
    transform: scale(1.05);
  }

  .card-image-placeholder {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, var(--background-secondary) 0%, var(--primary) 100%);
    opacity: 0.7;
    color: var(--text);
  }

  .card-tag-highlight {
    position: absolute;
    top: 15px;
    right: 15px;
    background-color: var(--primary);
    color: rgb(0, 0, 0);
    padding: 5px 12px;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
  }

  /* Contenu de la carte */
  .card-content {
    padding: 25px;
    display: flex;
    flex-direction: column;
    flex-grow: 1;
  }

  .card-meta {
    display: flex;
    justify-content: space-between;
    font-size: 0.85rem;
    color: var(--text-secondary);
    margin-bottom: 15px;
  }

  .post-title {
    font-size: 1.5rem;
    line-height: 1.3;
    font-weight: 700;
    margin-bottom: 15px;
    color: var(--text);
    transition: color var(--transition-speed);
  }

  .post-card:hover .post-title {
    color: var(--primary);
  }

  .post-excerpt {
    margin-bottom: 20px;
    font-size: 0.95rem;
    line-height: 1.5;
    color: var(--text-secondary);
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    flex-grow: 1;
  }

  .card-footer {
    margin-top: auto;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
  }

  .post-tags {
    display: flex;
    gap: 8px;
  }

  .tag {
    background-color: var(--tag-bg);
    color: var(--tag-text);
    padding: 4px 10px;
    border-radius: 4px;
    font-size: 0.75rem;
  }

  .read-more {
    color: var(--primary);
    font-weight: 600;
    font-size: 0.9rem;
    display: flex;
    align-items: center;
    transition: transform var(--transition-speed);
    width: 100%;
    margin-top: 20px;
  }

  .read-more::after {
    content: "→";
    margin-left: 5px;
    transition: transform var(--transition-speed);
  }

  .post-card:hover .read-more::after {
    transform: translateX(3px);
  }

  /* Pagination */
  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 15px;
    margin-top: 30px;
  }

  .pagination-button {
    background-color: var(--card-bg);
    border: none;
    padding: 8px 20px;
    border-radius: 6px;
    font-weight: 500;
    cursor: pointer;
    transition: background-color var(--transition-speed);
    color: var(--text);
  }

  .pagination-button:hover:not(:disabled) {
    background-color: var(--primary);
    color: white;
  }

  .pagination-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .pagination-numbers {
    display: flex;
    gap: 10px;
  }

  .pagination-number {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    font-weight: 500;
    cursor: pointer;
    transition:
      background-color var(--transition-speed),
      color var(--transition-speed);
    text-decoration: none;
    color: inherit;
  }

  .pagination-number:hover {
    background-color: var(--background-secondary);
  }

  .pagination-number.active {
    background-color: var(--primary);
    color: white;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .blog-header h1 {
      font-size: 2.5rem;
    }

    .blog-subtitle {
      font-size: 1rem;
    }

    .posts-grid {
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: 20px;
    }

    .filter-tags {
      flex-wrap: nowrap;
      overflow-x: auto;
      padding-bottom: 15px;
      justify-content: flex-start;
    }

    .card-image-wrapper {
      height: 180px;
    }

    .post-title {
      font-size: 1.3rem;
    }
  }

  @media (max-width: 480px) {
    .blog-container {
      padding: 30px 15px 60px;
    }

    .blog-header h1 {
      font-size: 2rem;
    }

    .search-box input {
      padding: 12px 15px;
    }

    .card-content {
      padding: 20px;
    }

    .post-excerpt {
      -webkit-line-clamp: 2;
    }

    .card-footer {
      flex-direction: column;
      align-items: flex-start;
      gap: 10px;
    }
  }

  /* Animation de chargement (facultatif) */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .post-card {
    animation: fadeIn 0.6s ease forwards;
    opacity: 0;
  }

  .post-card:nth-child(1) {
    animation-delay: 0.1s;
  }
  .post-card:nth-child(2) {
    animation-delay: 0.2s;
  }
  .post-card:nth-child(3) {
    animation-delay: 0.3s;
  }
  .post-card:nth-child(4) {
    animation-delay: 0.4s;
  }
  .post-card:nth-child(5) {
    animation-delay: 0.5s;
  }
  .post-card:nth-child(6) {
    animation-delay: 0.6s;
  }

</style>

<script>
  // Scripts pour la fonctionnalité de filtrage, recherche et pagination
  document.addEventListener("DOMContentLoaded", () => {
    // Éléments DOM
    const filterTags = document.querySelectorAll(".filter-tag");
    const searchInput = document.getElementById("searchInput");
    const searchButton = document.getElementById("searchButton");
    const postCards = document.querySelectorAll(".post-card");
    const postsGrid = document.getElementById("postsGrid");
    const noResults = document.getElementById("noResults");
    const prevPageButton = document.getElementById("prevPage");
    const nextPageButton = document.getElementById("nextPage");

    // Variables d'état
    let currentTag = "all";
    let searchTerm = "";
    let currentPage = new URLSearchParams(window.location.search).get("page") || 1;

    // Fonction de filtrage des articles
    function filterPosts() {
      let visibleCount = 0;

      postCards.forEach((card) => {
        // Récupération des données de l'article
        const cardTitle = card.querySelector(".post-title").textContent.toLowerCase();
        const cardExcerpt = card.querySelector(".post-excerpt")?.textContent.toLowerCase() || "";
        const cardTags = JSON.parse(card.dataset.tags || "[]");

        // Filtrage par tag
        const passesTagFilter = currentTag === "all" || cardTags.includes(currentTag);

        // Filtrage par recherche
        const passesSearchFilter =
          searchTerm === "" || cardTitle.includes(searchTerm) || cardExcerpt.includes(searchTerm);

        // Afficher ou masquer l'article
        if (passesTagFilter && passesSearchFilter) {
          card.style.display = "";
          visibleCount++;
        } else {
          card.style.display = "none";
        }
      });

      // Afficher un message si aucun résultat
      if (visibleCount === 0) {
        noResults.style.display = "block";
        postsGrid.style.display = "none";
      } else {
        noResults.style.display = "none";
        postsGrid.style.display = "grid";
      }

      return visibleCount;
    }

    // Gestion des filtres par tag
    filterTags.forEach((tag) => {
      tag.addEventListener("click", () => {
        // Mise à jour de l'UI
        filterTags.forEach((t) => t.classList.remove("active"));
        tag.classList.add("active");

        // Mise à jour du tag actif
        currentTag = tag.dataset.tag;

        // Appliquer le filtrage
        filterPosts();
      });
    });

    // Gestion de la recherche
    function handleSearch() {
      searchTerm = searchInput.value.toLowerCase().trim();
      filterPosts();
    }

    searchInput.addEventListener("keyup", (event) => {
      if (event.key === "Enter") {
        handleSearch();
      }
    });

    searchButton.addEventListener("click", handleSearch);

    // Gestion de la pagination
    function updatePagination() {
      const urlParams = new URLSearchParams(window.location.search);
      currentPage = parseInt(urlParams.get("page") || "1");

      // Mise à jour de l'état des boutons
      prevPageButton.disabled = currentPage <= 1;
      nextPageButton.disabled = false; // À ajuster selon le nombre total de pages

      // Mise à jour des liens de pagination
      prevPageButton.onclick = () => {
        if (currentPage > 1) {
          navigateToPage(currentPage - 1);
        }
      };

      nextPageButton.onclick = () => {
        navigateToPage(currentPage + 1);
      };
    }

    function navigateToPage(page) {
      const url = new URL(window.location);
      url.searchParams.set("page", page);
      window.location.href = url.toString();
    }

    // Initialisation
    updatePagination();

    // Vérifier l'URL pour appliquer les filtres au chargement
    const urlParams = new URLSearchParams(window.location.search);
    const tagParam = urlParams.get("tag");

    if (tagParam) {
      const tagButton = document.querySelector(`.filter-tag[data-tag="${tagParam}"]`);
      if (tagButton) {
        filterTags.forEach((t) => t.classList.remove("active"));
        tagButton.classList.add("active");
        currentTag = tagParam;
        filterPosts();
      }
    }

    const searchParam = urlParams.get("search");
    if (searchParam) {
      searchInput.value = searchParam;
      searchTerm = searchParam.toLowerCase();
      filterPosts();
    }
  });
</script>
